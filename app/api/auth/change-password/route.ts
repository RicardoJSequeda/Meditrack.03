import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/database'
import { verifyToken, verifyPassword, hashPassword } from '@/lib/auth'
import { z } from 'zod'

// Schema de validaci√≥n para cambiar contrase√±a
const ChangePasswordSchema = z.object({
  currentPassword: z.string().min(1, 'La contrase√±a actual es requerida'),
  newPassword: z.string().min(6, 'La nueva contrase√±a debe tener al menos 6 caracteres')
})

export async function PUT(request: NextRequest) {
  try {
    console.log('üîç Iniciando cambio de contrase√±a...')
    
    const token = request.headers.get('authorization')?.replace('Bearer ', '')
    
    if (!token) {
      console.error('‚ùå Token no proporcionado')
      return NextResponse.json({ error: 'Token no proporcionado' }, { status: 401 })
    }

    const decoded = await verifyToken(token)
    if (!decoded) {
      console.error('‚ùå Token inv√°lido')
      return NextResponse.json({ error: 'Token inv√°lido' }, { status: 401 })
    }

    console.log('‚úÖ Token v√°lido para usuario:', decoded.userId)

    const body = await request.json()
    console.log('üìù Datos recibidos:', { currentPassword: '***', newPassword: '***' })
    
    // Validar datos
    const validatedData = ChangePasswordSchema.parse(body)
    console.log('‚úÖ Datos validados')
    
    // Obtener usuario actual
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: { id: true, email: true, password: true }
    })

    if (!user) {
      console.error('‚ùå Usuario no encontrado')
      return NextResponse.json({ error: 'Usuario no encontrado' }, { status: 404 })
    }

    // Verificar contrase√±a actual
    const isCurrentPasswordValid = await verifyPassword(validatedData.currentPassword, user.password)
    if (!isCurrentPasswordValid) {
      console.error('‚ùå Contrase√±a actual incorrecta')
      return NextResponse.json({ error: 'La contrase√±a actual es incorrecta' }, { status: 400 })
    }

    console.log('‚úÖ Contrase√±a actual verificada')

    // Hashear nueva contrase√±a
    const hashedNewPassword = await hashPassword(validatedData.newPassword)
    console.log('‚úÖ Nueva contrase√±a hasheada')

    // Actualizar contrase√±a en la base de datos
    const updatedUser = await prisma.user.update({
      where: { id: decoded.userId },
      data: { password: hashedNewPassword },
      select: { id: true, email: true, name: true }
    })

    console.log('‚úÖ Contrase√±a actualizada exitosamente')

    return NextResponse.json({ 
      success: true,
      message: 'Contrase√±a cambiada exitosamente',
      data: {
        id: updatedUser.id,
        email: updatedUser.email,
        name: updatedUser.name
      }
    })
  } catch (error) {
    console.error('‚ùå Error al cambiar contrase√±a:', error)
    
    if (error instanceof z.ZodError) {
      console.error('‚ùå Error de validaci√≥n:', error.issues)
      return NextResponse.json(
        { error: 'Datos inv√°lidos', details: error.issues },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    )
  }
} 